#!/usr/bin/env bash

set -e

readonly scriptname="${0##*/}"

function usage() {
  cat <<USAGE >&2
Usage: $scriptname

Create symlinks under HOME to files under a mirrored directory
hierarchy.

The environment variable SYMLINKTO_TREE should point to the absolute
path to the root of the mirrored directory hierarchy. This variable
must be set before using this script.

Any (real) file under SYMLINKTO_TREE become candidates for symlinks.

The main use case is to maintain (configuration) files that we do not
want to put under version control in a different repository. For
example, Emacs's .dir-locals.el mechanism allows directory-dependent
configurations by just creating the file under a target directory.
However, it is often not desirable to put editor-specific files under
version control for share. In that case, we "mirror" the directory
hierarchy under SYMLINKTO_TREE, have .dir-locals.el files there, and
then run symlinkto to create symlinks linking to them under the actual
version-controlled directories.

Source code: https://github.com/okomestudio/symlinkto

USAGE
  exit "${1:-1}"
}


function error() {
  >&2 echo "$scriptname: $1"
  >&2 echo "Try '$scriptname -h' for more information."
  exit "${2:-1}"
}


here=$(pwd)
here="${here/#\~/$HOME}"


function main() {
  target_tree="$SYMLINKTO_TREE"
  if [ -z "$target_tree" ]; then
    error "Set SYMLINKTO_TREE before using symlinkto"
  fi
  target_tree="${target_tree/#\~/$HOME}"

  for target in $(tree -afiF --prune --noreport "$here"); do
    if [ -f "$target" ]; then
      echo -n "Target: ~/${target/$target_tree/} ... "

      link="$HOME/${target/$target_tree/}"
      link_parent="$(dirname $link)"
      if [ -L "$link" ]; then
        echo "already symlinked"
      elif [ -e "$link" ]; then
        echo "file exists"
      elif [ ! -d "$link_parent" ]; then
        echo "parent directory missing"
      else
        echo -n "not yet symlinked. "
        read -p 'Create? [y/N]: ' resp
        resp=${resp:-n}
        if [ $resp = "Y" ] || [ $resp = "y" ]; then
          ln -s "$target" "$link"
          echo "Link created"
        else
          echo "Link skipped"
        fi
      fi
    fi
  done
}


if [ "$0" = "${BASH_SOURCE[0]}" ]; then
  while getopts "h" opt; do
    case $opt in
      h|\?)
        if [ "$opt" = "h" ]; then usage 0; else usage; fi
        ;;
    esac
  done
  shift $((OPTIND - 1))

  main "$@"
fi
